.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_feature_types.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_40_advanced_example_feature_types.py:


=============
Feature Types
=============

In *auto-sklearn* it is possible to specify the feature types of a dataset when calling the method
:meth:`fit() <autosklearn.classification.AutoSklearnClassifier.fit>` by specifying the argument
``feat_type``. The following example demonstrates a way it can be done.

Additionally, you can provide a properly formatted pandas DataFrame, and the feature
types will be automatically inferred, as demonstrated in
`Pandas Train and Test inputs <example_pandas_train_test.html>`_.


.. code-block:: default

    import numpy as np

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification









Data Loading
============
Load Australian dataset from https://www.openml.org/d/40981


.. code-block:: default

    bunch = data = sklearn.datasets.fetch_openml(data_id=40981, as_frame=True)
    y = bunch['target'].to_numpy()
    X = bunch['data'].to_numpy(np.float)

    X_train, X_test, y_train, y_test = \
         sklearn.model_selection.train_test_split(X, y, random_state=1)

    # Auto-sklearn can automatically recognize categorical/numerical data from a pandas
    # DataFrame. This example highlights how the user can provide the feature types,
    # when using numpy arrays, as there is no per-column dtype in this case.
    # feat_type is a list that tags each column from a DataFrame/ numpy array / list
    # with the case-insensitive string categorical or numerical, accordingly.
    feat_type = ['Categorical' if x.name == 'category' else 'Numerical' for x in bunch['data'].dtypes]








Build and fit a classifier
==========================


.. code-block:: default


    cls = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=30,
        # Bellow two flags are provided to speed up calculations
        # Not recommended for a real implementation
        initial_configurations_via_metalearning=0,
        smac_scenario_args={'runcount_limit': 1},
    )
    cls.fit(X_train, y_train, X_test, y_test, feat_type=feat_type)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [WARNING] [2020-11-23 18:17:37,162:AutoML(1):73543c4a360aa24498c0967fbc2f926b] No valid ensemble was created. Please check the logfile for errors. Default to the best individual estimator:[(1, 2, 0.0)]

    AutoSklearnClassifier(dask_client=None,
                          delete_output_folder_after_terminate=True,
                          delete_tmp_folder_after_terminate=True,
                          disable_evaluator_output=False, ensemble_nbest=50,
                          ensemble_size=50, exclude_estimators=None,
                          exclude_preprocessors=None, get_smac_object_callback=None,
                          include_estimators=None, include_preprocessors=None,
                          initial_configurations_via_metalearning=0,
                          load_models=None, logging_config=None,
                          max_models_on_disc=50, memory_limit=3072,
                          metadata_directory=None, metric=None, n_jobs=None,
                          output_folder=None, per_run_time_limit=3,
                          resampling_strategy='holdout',
                          resampling_strategy_arguments=None, seed=1,
                          smac_scenario_args={'runcount_limit': 1},
                          time_left_for_this_task=30, tmp_folder=None)



Get the Score of the final ensemble
===================================


.. code-block:: default


    predictions = cls.predict(X_test)
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Accuracy score 0.8786127167630058





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.409 seconds)


.. _sphx_glr_download_examples_40_advanced_example_feature_types.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_feature_types.py <example_feature_types.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_feature_types.ipynb <example_feature_types.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
